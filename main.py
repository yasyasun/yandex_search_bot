import csv
import io

import telebot
from telebot.types import BotCommand

from utils import process_queries, write_results_to_file, calculate_shares

YANDEX_API_KEY = 'YANDEX_API_KEY'  # –ó–∞–º–µ–Ω–∏—Ç—å 'YANDEX_API_KEY' –Ω–∞ –≤–∞—à –∫–ª—é—á API
BOT_TOKEN = 'BOT_TOKEN'  # –ó–∞–º–µ–Ω–∏—Ç—å 'BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
COMMANDS = (
    ('start', '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
    ('yandex_search', '–ü–æ–∏—Å–∫ –ø–æ–∑–∏—Ü–∏–∏ –¥–æ–º–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É'),
)

bot = telebot.TeleBot(BOT_TOKEN)


@bot.message_handler(commands=['start'])
def start_command(message):
    """–§—É–Ω–∫—Ü–∏—è, —Ä–µ–∞–≥–∏—Ä—É—é—â–∞—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É '/start'. –í—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    bot.send_message(message.from_user.id, f'üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.username}!\n'
                                           f'–ù–∞–∂–º–∏ /yandex_search –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–æ–º–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É.')


@bot.message_handler(commands=['yandex_search'])
def yandex_search_command(message):
    """–§—É–Ω–∫—Ü–∏—è, —Ä–µ–∞–≥–∏—Ä—É—é—â–∞—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É '/yandex_search'."""
    bot.send_message(message.from_user.id, f'–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '
                                           f'<b>CSV</b> –∏–ª–∏ <b>TXT</b>.', parse_mode='html')
    bot.register_next_step_handler(message, file_handler)


@bot.message_handler(content_types=['document'])
def file_handler(message):
    """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã '/yandex_search'. –ù–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∞–π–ª –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ."""
    try:
        if not message.document:
            bot.reply_to(message,
                         f'–≠—Ç–æ –Ω–µ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ üòé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>CSV</b> –∏–ª–∏ <b>TXT</b>.',
                         parse_mode='html')
            return

        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path).decode('utf-8')
        mime_type = message.document.mime_type

        if mime_type == 'text/csv':
            csv_reader = csv.reader(io.StringIO(downloaded_file))
            queries_data = [row[0] for row in csv_reader if row]  # 1-—ã–π —Å—Ç–æ–ª–±–µ—Ü - –∑–∞–ø—Ä–æ—Å/–∑–∞–ø—Ä–æ—Å—ã
            if not queries_data:
                bot.reply_to(message, '–§–∞–π–ª CSV –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π.')
                return

        elif mime_type == 'text/plain':
            queries_data = downloaded_file.splitlines()  # –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
            if not queries_data:
                bot.reply_to(message, '–§–∞–π–ª TXT –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π.')
                return

        else:
            bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV –∏–ª–∏ TXT.')
            return

    except Exception as e:
        bot.reply_to(message, f'‚ö†Ô∏è –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.')
        print(f"–û—à–∏–±–∫–∞: {e}")
        return
    bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ –¥–æ–º–µ–Ω/–¥–æ–º–µ–Ω—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É.')
    bot.register_next_step_handler(message, file_handler_with_domains, queries_data)


def file_handler_with_domains(message, queries_data):
    """
    –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã '/yandex_search'.
    –ù–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–æ–º–µ–Ω/–¥–æ–º–µ–Ω—ã –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞.
    """
    msg = bot.send_message(message.chat.id, '–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...')
    try:
        domains = [domain.strip() for domain in message.text.split(' ')]

        results = process_queries(queries_data, domains, YANDEX_API_KEY)
        if not results:
            bot.edit_message_text(chat_id=message.chat.id, message_id=msg.message_id,
                                  text='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç—ã–µ. –ü—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞. '
                                       '–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–∂–º–∏ /yandex_search')
            return

        results_file = 'results.csv'
        write_results_to_file(results_file, results)
        share_domains = calculate_shares(results_file)

        bot.edit_message_text(chat_id=message.chat.id, message_id=msg.message_id,
                              text=f'–î–æ–ª—è –¥–æ–º–µ–Ω–æ–≤:\n```{share_domains}```', parse_mode='Markdown')
        with open(results_file, 'r', encoding='utf-8') as file_to_send:
            bot.send_document(message.chat.id, file_to_send, caption='–¢–≤–æ–π —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏')
    except Exception as e:
        bot.reply_to(message, f'‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.')
        print(f"–û—à–∏–±–∫–∞: {e}")
        return


@bot.message_handler(state=None)
def bot_echo(message):
    """
    –≠—Ö–æ —Ö–µ–Ω–¥–ª–µ—Ä, –∫—É–¥–∞ –ª–µ—Ç—è—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    –¢–∞–∫–∂–µ —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è '–ø—Ä–∏–≤–µ—Ç'.
    """
    if message.text.lower() == '–ø—Ä–∏–≤–µ—Ç':
        bot.send_message(message, f'üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.username}!\n'
                                  f'–ù–∞–∂–º–∏ /yandex_search –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–æ–º–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É.')
    else:
        bot.reply_to(message, '–ù–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã.\n'
                              '–ù–∞–∂–º–∏ /start')


if __name__ == "__main__":
    bot.set_my_commands([BotCommand(*i) for i in COMMANDS])
    bot.polling()
